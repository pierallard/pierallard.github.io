/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/easystarjs/src/easystar.js":
/*!*************************************************!*\
  !*** ./node_modules/easystarjs/src/easystar.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = __webpack_require__(/*! ./instance */ \"./node_modules/easystarjs/src/instance.js\");\nvar Node = __webpack_require__(/*! ./node */ \"./node_modules/easystarjs/src/node.js\");\nvar Heap = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n\n\n//# sourceURL=webpack:///./node_modules/easystarjs/src/easystar.js?");

/***/ }),

/***/ "./node_modules/easystarjs/src/instance.js":
/*!*************************************************!*\
  !*** ./node_modules/easystarjs/src/instance.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};\n\n//# sourceURL=webpack:///./node_modules/easystarjs/src/instance.js?");

/***/ }),

/***/ "./node_modules/easystarjs/src/node.js":
/*!*********************************************!*\
  !*** ./node_modules/easystarjs/src/node.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};\n\n//# sourceURL=webpack:///./node_modules/easystarjs/src/node.js?");

/***/ }),

/***/ "./node_modules/heap/index.js":
/*!************************************!*\
  !*** ./node_modules/heap/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/heap */ \"./node_modules/heap/lib/heap.js\");\n\n\n//# sourceURL=webpack:///./node_modules/heap/index.js?");

/***/ }),

/***/ "./node_modules/heap/lib/heap.js":
/*!***************************************!*\
  !*** ./node_modules/heap/lib/heap.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (true) {\n      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n\n\n//# sourceURL=webpack:///./node_modules/heap/lib/heap.js?");

/***/ }),

/***/ "./src/SoundManager.ts":
/*!*****************************!*\
  !*** ./src/SoundManager.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SOUND;\n(function (SOUND) {\n    SOUND[\"EVIL_COIN_DEATH\"] = \"evil_coin_death\";\n    SOUND[\"EVIL_COIN_FEAR\"] = \"evil_coin_fear\";\n    SOUND[\"EVIL_COIN_PUSH\"] = \"evil_coin_push\";\n    SOUND[\"OTHER_COIN_DEATH\"] = \"other_coin_death\";\n    SOUND[\"OTHER_COIN_FEAR\"] = \"other_coin_fear\";\n    SOUND[\"OTHER_COIN_HURT\"] = \"other_coin_hurt\";\n    SOUND[\"PICK_COIN\"] = \"pick_coin\";\n    SOUND[\"SWORD\"] = \"sword\";\n})(SOUND = exports.SOUND || (exports.SOUND = {}));\nclass Sound {\n    constructor(game, type, id) {\n        this.originalVolume = 1;\n        this.type = type;\n        this.id = id;\n        this.audio = game.add.audio(type + '_' + id);\n        this.audio.allowMultiple = true;\n    }\n    play(volume = 1) {\n        this.originalVolume = volume;\n        console.log('play ' + this.type + ' - ' + this.id + ' (' + this.audio.volume + ')');\n        if (this.audio.isPlaying) {\n            this.audio.restart(this.audio.currentMarker, 0);\n        }\n        else {\n            this.audio.play();\n        }\n    }\n    setMuted(muted) {\n        this.audio.volume = muted ? 0 : this.originalVolume;\n    }\n}\nclass SoundManager {\n    static create(game) {\n        if (!this.music) {\n            this.music = game.add.audio('music');\n            this.music.loop = true;\n            this.evilMusic = game.add.audio('evil_music');\n            this.evilMusic.volume = 0;\n            this.evilMusic.loop = true;\n            this.music.play();\n            this.evilMusic.play();\n            this.sounds = [];\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_DEATH, 1));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_DEATH, 2));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_DEATH, 3));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_DEATH, 4));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 1));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 2));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 3));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 4));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 5));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 6));\n            // this.sounds.push(new Sound(game, SOUND.EVIL_COIN_FEAR, 7)); // Used for run\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_PUSH, 1));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_PUSH, 2));\n            this.sounds.push(new Sound(game, SOUND.EVIL_COIN_PUSH, 3));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_DEATH, 1));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_DEATH, 2));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_DEATH, 3));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 1));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 2));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 3));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 4));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 5));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 6));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_FEAR, 7));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_HURT, 1));\n            this.sounds.push(new Sound(game, SOUND.OTHER_COIN_HURT, 2));\n            this.sounds.push(new Sound(game, SOUND.PICK_COIN, 1));\n            this.sounds.push(new Sound(game, SOUND.PICK_COIN, 2));\n            // this.sounds.push(new Sound(game, SOUND.PICK_COIN, 3)); // Son fail\n            this.sounds.push(new Sound(game, SOUND.SWORD, 1));\n            this.sounds.push(new Sound(game, SOUND.SWORD, 2));\n            this.sounds.push(new Sound(game, SOUND.SWORD, 3));\n            this.sounds.push(new Sound(game, SOUND.SWORD, 4));\n            this.sounds.push(new Sound(game, SOUND.SWORD, 5));\n            this.sounds.push(new Sound(game, SOUND.SWORD, 6));\n        }\n    }\n    static play(type, volume = 1) {\n        const ss = this.sounds.filter((sound) => {\n            return sound.type === type;\n        });\n        const sound = ss[Math.floor(Math.random() * ss.length)];\n        sound.play(volume);\n    }\n    static setEvil(b) {\n        const evilSoundTypes = [SOUND.EVIL_COIN_DEATH, SOUND.EVIL_COIN_FEAR, SOUND.EVIL_COIN_PUSH, SOUND.OTHER_COIN_DEATH,\n            SOUND.OTHER_COIN_FEAR, SOUND.OTHER_COIN_HURT, SOUND.SWORD].map((x) => { return x + ''; });\n        if (b) {\n            this.evilMusic.volume = 1;\n            this.music.volume = 0;\n            this.sounds.forEach((sound) => {\n                sound.setMuted(evilSoundTypes.indexOf(sound.type + '') < 0);\n            });\n        }\n        else {\n            this.evilMusic.volume = 0;\n            this.music.volume = 1;\n            this.sounds.forEach((sound) => {\n                sound.setMuted(evilSoundTypes.indexOf(sound.type + '') >= 0);\n            });\n        }\n    }\n}\nexports.SoundManager = SoundManager;\n\n\n//# sourceURL=webpack:///./src/SoundManager.ts?");

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/// <reference path=\"../dist/lib/phaser.d.ts\"/>\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Boot_1 = __webpack_require__(/*! ./game/game_state/Boot */ \"./src/game/game_state/Boot.ts\");\nconst Preload_1 = __webpack_require__(/*! ./game/game_state/Preload */ \"./src/game/game_state/Preload.ts\");\nconst Stage1_1 = __webpack_require__(/*! ./game/game_state/Stage1 */ \"./src/game/game_state/Stage1.ts\");\nconst Stage2_1 = __webpack_require__(/*! ./game/game_state/Stage2 */ \"./src/game/game_state/Stage2.ts\");\nconst Stage3_1 = __webpack_require__(/*! ./game/game_state/Stage3 */ \"./src/game/game_state/Stage3.ts\");\nconst Credits_1 = __webpack_require__(/*! ./game/game_state/Credits */ \"./src/game/game_state/Credits.ts\");\nexports.SCALE = 4;\nconst GAME_WIDTH = 1200;\nconst GAME_HEIGHT = 800;\nexports.TILE_SIZE = 24;\nclass SimpleGame extends Phaser.Game {\n    constructor() {\n        super({\n            width: GAME_WIDTH / exports.SCALE,\n            height: GAME_HEIGHT / exports.SCALE,\n            renderer: Phaser.CANVAS,\n            parent: null,\n            state: 'content',\n            transparent: false,\n            antialias: false,\n            physicsConfig: false\n        });\n        this.antialias = false;\n        this.state.add('Boot', Boot_1.default);\n        this.state.add('Preload', Preload_1.default);\n        this.state.add('Stage1', Stage1_1.default);\n        this.state.add('Stage2', Stage2_1.default);\n        this.state.add('Stage3', Stage3_1.default);\n        this.state.add('Credits', Credits_1.Credits);\n        this.state.start('Boot');\n    }\n}\nwindow.onload = () => {\n    new SimpleGame();\n};\n\n\n//# sourceURL=webpack:///./src/app.ts?");

/***/ }),

/***/ "./src/game/Bloc.ts":
/*!**************************!*\
  !*** ./src/game/Bloc.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Tile_1 = __webpack_require__(/*! ./Tile */ \"./src/game/Tile.ts\");\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nclass Bloc extends Tile_1.Tile {\n    create(game, normalGroup, evilGroup) {\n        const variant = Math.ceil(Math.random() * 2);\n        let spriteName = '';\n        let evilSpriteName = '';\n        switch (variant) {\n            case 1:\n                spriteName = 'bloc_box';\n                evilSpriteName = 'evil_bloc_box';\n                break;\n            case 2:\n                spriteName = 'bloc_stone';\n                evilSpriteName = 'evil_bloc_stone';\n                break;\n        }\n        this.normalSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, spriteName);\n        normalGroup.add(this.normalSprite);\n        this.evilSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, evilSpriteName);\n        evilGroup.add(this.evilSprite);\n    }\n    isAllowedForPlayer() {\n        return false;\n    }\n    isAllowedForCoin() {\n        return false;\n    }\n}\nexports.Bloc = Bloc;\n\n\n//# sourceURL=webpack:///./src/game/Bloc.ts?");

/***/ }),

/***/ "./src/game/Bush.ts":
/*!**************************!*\
  !*** ./src/game/Bush.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Tile_1 = __webpack_require__(/*! ./Tile */ \"./src/game/Tile.ts\");\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nclass Bush extends Tile_1.Tile {\n    create(game, normalGroup, evilGroup) {\n        this.normalSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'bush');\n        normalGroup.add(this.normalSprite);\n        this.evilSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'evil_bush');\n        evilGroup.add(this.evilSprite);\n    }\n    isAllowedForPlayer() {\n        return false;\n    }\n    isAllowedForCoin() {\n        return false;\n    }\n}\nexports.Bush = Bush;\n\n\n//# sourceURL=webpack:///./src/game/Bush.ts?");

/***/ }),

/***/ "./src/game/Coin.ts":
/*!**************************!*\
  !*** ./src/game/Coin.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nconst EvilPlayer_1 = __webpack_require__(/*! ./EvilPlayer */ \"./src/game/EvilPlayer.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../SoundManager */ \"./src/SoundManager.ts\");\nclass Coin {\n    constructor(id, position, player, coins) {\n        this.isMoving = false;\n        this.getPosition = () => this.position;\n        this.id = id;\n        this.position = position;\n        this.isDead = false;\n        this.player = player;\n        this.coins = coins;\n    }\n    isAlive() {\n        return !this.isDead;\n    }\n    create(game, normalGroup, evilGroup) {\n        this.tweens = [];\n        this.timeEvents = [];\n        this.isDead = false;\n        this.isMoving = false;\n        this.soundFear = false;\n        this.shadow = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'shadow');\n        this.shadow.anchor.set(0.1, 0.1);\n        normalGroup.add(this.shadow);\n        this.shadowEvil = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'shadow');\n        this.shadowEvil.anchor.set(0.1, 0.1);\n        evilGroup.add(this.shadowEvil);\n        this.sprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, \"normal_coin\");\n        normalGroup.add(this.sprite);\n        this.sprite.animations.add('IDLE', [0, 1, 2, 3, 4, 5], Phaser.Timer.SECOND / 70, true);\n        this.sprite.animations.play('IDLE');\n        this.evilSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, \"evil_coin\");\n        this.evilSprite.anchor.set(0.3, 0.3);\n        evilGroup.add(this.evilSprite);\n        this.evilSprite.animations.add('IDLE', [0, 1, 2, 3, 4, 5, 6], Phaser.Timer.SECOND / 70, true);\n        this.evilSprite.animations.add('RUN', [7, 8, 9, 10, 11, 12], Phaser.Timer.SECOND / 70, true);\n        this.evilSprite.animations.add('SCARED', [13, 14], Phaser.Timer.SECOND / 70, true);\n        this.evilSprite.animations.add('DIE', [15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24], Phaser.Timer.SECOND / 70, false);\n        this.evilSprite.animations.play('IDLE');\n    }\n    update(game, level) {\n        if (this.isDead) {\n            return;\n        }\n        if (this.isMoving) {\n            return;\n        }\n        if (!this.soundFear && Math.random() < 0.01) {\n            SoundManager_1.SoundManager.play(SoundManager_1.SOUND.OTHER_COIN_FEAR, 0.2);\n            this.soundFear = true;\n            game.time.events.add(Phaser.Timer.SECOND * 2, () => {\n                this.soundFear = false;\n            }, this);\n        }\n        if (this.playerIsClose()) {\n            if (!this.soundFear && Math.random() < 0.5) {\n                SoundManager_1.SoundManager.play(SoundManager_1.SOUND.OTHER_COIN_FEAR);\n                this.soundFear = true;\n                game.time.events.add(Phaser.Timer.SECOND * 2, () => {\n                    this.soundFear = false;\n                }, this);\n            }\n            if (Math.random() < Coin.PROBA_FUITE) {\n                this.runAway(level, game);\n                return;\n            }\n            else {\n                this.playScared();\n            }\n        }\n        else {\n            if (this.sprite.animations.currentAnim.name !== 'IDLE') {\n                this.sprite.animations.play('IDLE');\n            }\n        }\n        if (Math.random() < 0.3) {\n            if (this.sprite.scale.x < 0) {\n                this.sprite.scale.set(1, 1);\n                this.sprite.anchor.set(0, 0);\n            }\n            else {\n                this.sprite.scale.set(-1, 1);\n                this.sprite.anchor.set(1, 0);\n            }\n        }\n    }\n    moveTo(game, level, position) {\n        if (!this.isMovingAllowed(level, position)) {\n            return;\n        }\n        if (!this.position.equals(position) && this.sprite.animations.currentAnim.name !== 'RUN') {\n            this.sprite.animations.play('RUN');\n        }\n        this.isMoving = true;\n        if (this.position.x < position.x) {\n            this.sprite.scale.set(1, 1);\n            this.sprite.anchor.set(0, 0);\n            this.evilSprite.scale.set(1, 1);\n            this.evilSprite.anchor.set(0.3, 0.3);\n        }\n        else if (this.position.x > position.x) {\n            this.evilSprite.scale.set(-1, 1);\n            this.evilSprite.anchor.set(0.7, 0.3);\n        }\n        [this.sprite, this.evilSprite, this.shadowEvil, this.shadow].forEach((sprite) => {\n            this.tweens.push(game.add.tween(sprite).to({\n                x: position.x * app_1.TILE_SIZE,\n                y: position.y * app_1.TILE_SIZE\n            }, 0.3 * Phaser.Timer.SECOND - Phaser.Timer.SECOND / 50, Phaser.Easing.Default, true));\n        });\n        this.timeEvents.push(game.time.events.add(0.3 * Phaser.Timer.SECOND, () => {\n            this.isMoving = false;\n            this.position = position;\n            this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n            this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n            this.evilSprite.position.x = this.position.x * app_1.TILE_SIZE;\n            this.evilSprite.position.y = this.position.y * app_1.TILE_SIZE;\n        }, this));\n    }\n    isMovingAllowed(level, position) {\n        if (!level.isAllowedForCoin(position)) {\n            return false;\n        }\n        for (const coin of this.coins) {\n            if (coin.id === this.id) {\n                continue;\n            }\n            if (coin.getPosition().equals(position)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static dist(playerPosition, position) {\n        return Math.sqrt((playerPosition.x - position.x) * (playerPosition.x - position.x) +\n            (playerPosition.y - position.y) * (playerPosition.y - position.y));\n    }\n    kill() {\n        this.sprite.alpha = 0;\n        this.evilSprite.animations.play('DIE');\n        this.evilSprite.alpha = 1;\n        this.shadow.alpha = 0;\n        this.shadowEvil.alpha = 0;\n        this.isDead = true;\n        this.isMoving = true;\n    }\n    stopMoving(game, rightOriented) {\n        this.isMoving = true;\n        this.tweens.forEach((tween) => {\n            tween.stop(false);\n        });\n        this.timeEvents.forEach((timeEvent) => {\n            timeEvent.callback = () => { };\n        });\n        const gapX = 14 * (rightOriented ? 1 : -1);\n        const gapY = 3;\n        const moveBackTime = 0.3 * Phaser.Timer.SECOND;\n        [this.sprite, this.evilSprite, this.shadow, this.shadowEvil].forEach((sprite) => {\n            game.add.tween(sprite).to({\n                x: this.position.x * app_1.TILE_SIZE + gapX,\n                y: this.position.y * app_1.TILE_SIZE + gapY\n            }, moveBackTime, Phaser.Easing.Default, true);\n        });\n        game.add.tween(this.evilSprite).to({\n            alpha: 0,\n        }, moveBackTime - Phaser.Timer.SECOND / 50, Phaser.Easing.Default, true);\n        game.time.events.add(moveBackTime, () => {\n            this.evilSprite.alpha = 0;\n        });\n    }\n    playerIsClose() {\n        if (this.player instanceof EvilPlayer_1.EvilPlayer && !this.player.visible) {\n            return false;\n        }\n        return Coin.dist(this.player.getPosition(), this.position) < Coin.SCARED_DISTANCE;\n    }\n    playScared() {\n        this.evilSprite.animations.play('SCARED');\n    }\n    ressussitate() {\n        this.sprite.alpha = 1;\n        this.shadow.alpha = 1;\n        this.shadowEvil.alpha = 1;\n        this.isDead = false;\n        this.isMoving = false;\n    }\n    reinitialize(position) {\n        this.position = position;\n        this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n        this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        this.evilSprite.position.x = this.position.x * app_1.TILE_SIZE;\n        this.evilSprite.position.y = this.position.y * app_1.TILE_SIZE;\n        this.shadow.position.x = this.position.x * app_1.TILE_SIZE;\n        this.shadow.position.y = this.position.y * app_1.TILE_SIZE;\n        this.sprite.animations.play('IDLE');\n        this.evilSprite.animations.play('IDLE');\n    }\n    runAway(level, game) {\n        const possiblePositions = [\n            this.position, this.position.left(), this.position.right(), this.position.up(), this.position.down()\n        ];\n        const availablePositions = possiblePositions.filter((position) => {\n            return this.isMovingAllowed(level, position);\n        });\n        const playerPosition = this.player.getPosition();\n        if (availablePositions.length) {\n            const sortedPositions = availablePositions.sort((a, b) => {\n                return Coin.dist(playerPosition, b) - Coin.dist(playerPosition, a);\n            });\n            this.moveTo(game, level, sortedPositions[0]);\n        }\n        else {\n            this.playScared();\n        }\n    }\n}\nCoin.SCARED_DISTANCE = 5;\nCoin.PROBA_FUITE = 0.03;\nexports.Coin = Coin;\n\n\n//# sourceURL=webpack:///./src/game/Coin.ts?");

/***/ }),

/***/ "./src/game/CoinCounter.ts":
/*!*********************************!*\
  !*** ./src/game/CoinCounter.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass CoinCounter {\n    constructor(coins, playableCoin) {\n        this.create = (game, group) => {\n            this.text = game.add.bitmapText(game.width - 60, 5, \"Carrier Command\", \"\", 7, group);\n            this.text.fixedToCamera = true;\n        };\n        this.update = () => {\n            let coinAliveCount = 0;\n            for (const coin of this.coins) {\n                if (coin.isAlive()) {\n                    coinAliveCount++;\n                }\n            }\n            if (this.playableCoin.isAlive()) {\n                coinAliveCount++;\n            }\n            this.text.setText(coinAliveCount + \" coins\");\n            this.text.updateText();\n        };\n        this.coins = coins;\n        this.playableCoin = playableCoin;\n    }\n}\nexports.CoinCounter = CoinCounter;\n\n\n//# sourceURL=webpack:///./src/game/CoinCounter.ts?");

/***/ }),

/***/ "./src/game/Direction.ts":
/*!*******************************!*\
  !*** ./src/game/Direction.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DIRECTION;\n(function (DIRECTION) {\n    DIRECTION[\"UP\"] = \"UP\";\n    DIRECTION[\"DOWN\"] = \"DOWN\";\n    DIRECTION[\"RIGHT\"] = \"RIGHT\";\n    DIRECTION[\"LEFT\"] = \"LEFT\";\n})(DIRECTION = exports.DIRECTION || (exports.DIRECTION = {}));\n\n\n//# sourceURL=webpack:///./src/game/Direction.ts?");

/***/ }),

/***/ "./src/game/EvilPlayer.ts":
/*!********************************!*\
  !*** ./src/game/EvilPlayer.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Point_1 = __webpack_require__(/*! ./Point */ \"./src/game/Point.ts\");\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../SoundManager */ \"./src/SoundManager.ts\");\nclass EvilPlayer {\n    constructor(pathfinder, target, position) {\n        this.pathfinder = pathfinder;\n        this.normalPlayerIsKilling = false;\n        this.path = null;\n        this.calculatingPath = false;\n        this.isPathUpdateRequired = () => {\n            if (this.calculatingPath) {\n                return false;\n            }\n            if (!this.path || this.path.length === 0) {\n                return true;\n            }\n            if (this.position.equals(this.target.position)) {\n                return true;\n            }\n            return false;\n        };\n        this.position = position;\n        this.isMoving = false;\n        this.target = target;\n        this.visible = true;\n    }\n    create(game, group) {\n        this.canMove = true;\n        this.shadow = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'shadow');\n        group.add(this.shadow);\n        this.shadow.anchor.set(0.1, 0.1);\n        this.sprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'evil_hero');\n        this.sprite.animations.add('IDLE', [0, 1, 2, 3], Phaser.Timer.SECOND / 150, true);\n        this.sprite.animations.add('RUN', [4, 5, 6, 7, 8, 9], Phaser.Timer.SECOND / 100, true);\n        this.sprite.animations.add('KILL1', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], Phaser.Timer.SECOND / 100, true);\n        this.sprite.animations.play('IDLE');\n        this.sprite.anchor.set(0.3, 0.3);\n        group.add(this.sprite);\n    }\n    update(game, level) {\n        if (!this.visible) {\n            return;\n        }\n        if (this.isMoving) {\n            return;\n        }\n        if (this.normalPlayerIsKilling) {\n            return;\n        }\n        if (!this.canMove) {\n            return;\n        }\n        const coin = this.canKill();\n        if (coin) {\n            this.kill(game, coin);\n            return;\n        }\n        this.pathfinder.calculate();\n        if (this.calculatingPath) {\n            return;\n        }\n        if (this.isPathUpdateRequired()) {\n            this.pathfinder.findPath(this.position.x, this.position.y, this.target.position.x, this.target.position.y, path => {\n                this.calculatingPath = false;\n                this.path = path;\n                if (this.path !== null) {\n                    path.shift(); // drop the first element (it's the current position).\n                }\n            });\n            this.calculatingPath = true;\n            return;\n        }\n        const destination = this.path.shift();\n        const point = new Point_1.default(destination.x, destination.y);\n        if (!point.equals(this.position)) {\n            this.moveTo(game, level, point);\n        }\n    }\n    moveTo(game, level, position, speed = null) {\n        if (!this.isMovingAllowed(level, position)) {\n            return;\n        }\n        this.isMoving = true;\n        if (this.position.x < position.x) {\n            this.sprite.scale.set(1, 1);\n            this.sprite.anchor.set(0.3, 0.3);\n        }\n        else if (this.position.x > position.x) {\n            this.sprite.scale.set(-1, 1);\n            this.sprite.anchor.set(0.7, 0.3);\n        }\n        this.sprite.animations.play('RUN');\n        game.add.tween(this.sprite).to({\n            x: position.x * app_1.TILE_SIZE,\n            y: position.y * app_1.TILE_SIZE\n        }, speed || EvilPlayer.SPEED, Phaser.Easing.Default, true);\n        game.add.tween(this.shadow).to({\n            x: position.x * app_1.TILE_SIZE,\n            y: position.y * app_1.TILE_SIZE\n        }, speed || EvilPlayer.SPEED, Phaser.Easing.Default, true);\n        game.time.events.add(speed || EvilPlayer.SPEED, () => {\n            this.position = position;\n            this.isMoving = false;\n            this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n            this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        }, this);\n    }\n    isMovingAllowed(level, position) {\n        if (position.x < 0) {\n            return false;\n        }\n        if (position.x >= level.getWidth()) {\n            return false;\n        }\n        if (position.y < 0) {\n            return false;\n        }\n        if (position.y >= level.getHeight()) {\n            return false;\n        }\n        if (!level.isAllowedForPlayer(position)) {\n            return false;\n        }\n        return true;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setCoins(coins) {\n        this.coins = coins;\n    }\n    canKill() {\n        const coins = this.coins.filter((coin) => {\n            return coin.getPosition().equals(this.position) && coin.isAlive();\n        });\n        if (coins.length) {\n            return coins[0];\n        }\n        return null;\n    }\n    kill(game, coin) {\n        this.isMoving = true;\n        this.playKill();\n        SoundManager_1.SoundManager.play(SoundManager_1.SOUND.SWORD);\n        SoundManager_1.SoundManager.play(SoundManager_1.SOUND.OTHER_COIN_DEATH);\n        game.time.events.add(0.7 * Phaser.Timer.SECOND, () => {\n            SoundManager_1.SoundManager.play(SoundManager_1.SOUND.SWORD);\n            SoundManager_1.SoundManager.play(SoundManager_1.SOUND.OTHER_COIN_DEATH);\n        }, this);\n        coin.stopMoving(game, this.sprite.scale.x > 0);\n        game.time.events.add(Phaser.Timer.SECOND, () => {\n            this.sprite.animations.play('IDLE');\n            this.isMoving = false;\n            coin.kill();\n        }, this);\n    }\n    setPosition(point) {\n        this.position = point;\n        this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n        this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        this.shadow.position.x = this.position.x * app_1.TILE_SIZE;\n        this.shadow.position.y = this.position.y * app_1.TILE_SIZE;\n    }\n    playKillAnimationTimeboxed(game, duration) {\n        this.normalPlayerIsKilling = true;\n        this.playKill();\n        game.time.events.add(duration, () => {\n            this.normalPlayerIsKilling = false;\n        });\n    }\n    playKill() {\n        const animations = ['KILL1'];\n        const anim = animations[Math.floor(Math.random() * animations.length)];\n        this.sprite.animations.play(anim);\n    }\n    playIdle() {\n        this.sprite.animations.play('IDLE');\n    }\n    setVisible(visible) {\n        this.visible = visible;\n        if (!this.visible) {\n            this.sprite.alpha = 0;\n            this.shadow.alpha = 0;\n        }\n        else {\n            this.sprite.alpha = 1;\n            this.shadow.alpha = 1;\n        }\n    }\n}\nEvilPlayer.SPEED = 0.22 * Phaser.Timer.SECOND;\nexports.EvilPlayer = EvilPlayer;\n\n\n//# sourceURL=webpack:///./src/game/EvilPlayer.ts?");

/***/ }),

/***/ "./src/game/MessageDisplayer.ts":
/*!**************************************!*\
  !*** ./src/game/MessageDisplayer.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass MessageDisplayer {\n    create(game, interfaceGroup) {\n        this.textBlock = game.add.graphics(0, 0);\n        interfaceGroup.add(this.textBlock);\n        this.textBlock.beginFill(0x000000, 0.5);\n        this.textBlock.drawRect((game.width - MessageDisplayer.WIDTH) / 2, (game.height - MessageDisplayer.HEIGHT) / 2, MessageDisplayer.WIDTH, MessageDisplayer.HEIGHT);\n        this.textBlock.fixedToCamera = true;\n        this.text = game.add.bitmapText((game.width - MessageDisplayer.WIDTH) / 2 + MessageDisplayer.GAP, (game.height - MessageDisplayer.HEIGHT) / 2 + MessageDisplayer.GAP, \"Carrier Command\", \"\", 5, interfaceGroup);\n        this.text.fixedToCamera = true;\n        this.bigText = game.add.bitmapText((game.width - MessageDisplayer.WIDTH + 15) / 2 + MessageDisplayer.GAP, (game.height - MessageDisplayer.HEIGHT + 10) / 2 + MessageDisplayer.GAP, \"Carrier Command\", \"\", 15, interfaceGroup);\n        this.bigText.align = 'center';\n        this.bigText.fixedToCamera = true;\n        interfaceGroup.add(this.text);\n        this.text.setText(\"default text\");\n        this.text.fixedToCamera = true;\n        this.setVisible(false);\n    }\n    update(game) {\n    }\n    displayBig(game, text, duration) {\n        this.setBigVisible(true);\n        this.bigText.setText(text);\n        game.time.events.add(duration, () => {\n            this.setBigVisible(false);\n        });\n    }\n    display(game, text, duration) {\n        this.setVisible(true);\n        this.text.setText(text);\n        this.textBlock.alpha = 1;\n        game.time.events.add(duration, () => {\n            this.setVisible(false);\n        });\n    }\n    setVisible(vis) {\n        this.visible = vis;\n        if (this.visible) {\n            this.textBlock.alpha = 1;\n            this.text.alpha = 1;\n        }\n        else {\n            this.textBlock.alpha = 0;\n            this.text.alpha = 0;\n        }\n    }\n    setBigVisible(vis) {\n        this.visible = vis;\n        if (this.visible) {\n            this.textBlock.alpha = 1;\n            this.bigText.alpha = 1;\n        }\n        else {\n            this.textBlock.alpha = 0;\n            this.bigText.alpha = 0;\n        }\n    }\n    isVisible() {\n        return this.visible;\n    }\n    setBigText(youLost) {\n        this.bigText.setText(youLost);\n    }\n}\nMessageDisplayer.WIDTH = 200;\nMessageDisplayer.HEIGHT = 50;\nMessageDisplayer.GAP = 10;\nexports.MessageDisplayer = MessageDisplayer;\n\n\n//# sourceURL=webpack:///./src/game/MessageDisplayer.ts?");

/***/ }),

/***/ "./src/game/PlayableCoin.ts":
/*!**********************************!*\
  !*** ./src/game/PlayableCoin.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../SoundManager */ \"./src/SoundManager.ts\");\nconst EvilPlayer_1 = __webpack_require__(/*! ./EvilPlayer */ \"./src/game/EvilPlayer.ts\");\nconst Coin_1 = __webpack_require__(/*! ./Coin */ \"./src/game/Coin.ts\");\nclass PlayableCoin {\n    constructor(position) {\n        this.position = position;\n        this.isMoving = false;\n    }\n    create(game, evilGroup, normalGroup) {\n        this.runSound = game.add.sound('evil_coin_fear_7');\n        this.runSound.loop = true;\n        this.runSound.play();\n        this.runSound.volume = 0;\n        this.soundFear = false;\n        this.isMoving = false;\n        this.dead = false;\n        this.shadow = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'shadow');\n        evilGroup.add(this.shadow);\n        normalGroup.add(this.shadow);\n        this.shadow.anchor.set(0.1, 0.1);\n        this.sprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'coin');\n        this.sprite.animations.add('IDLE', [0, 1, 2], Phaser.Timer.SECOND / 100, true);\n        this.sprite.animations.add('RUN', [3, 4, 5, 6, 7, 8], Phaser.Timer.SECOND / 50, true);\n        this.sprite.animations.play('IDLE');\n        evilGroup.add(this.sprite);\n        this.normalSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, \"normal_coin\");\n        normalGroup.add(this.normalSprite);\n        this.normalSprite.animations.add('IDLE', [0, 1, 2, 3, 4, 5], Phaser.Timer.SECOND / 70, true);\n        this.normalSprite.animations.play('IDLE');\n        this.leftKey = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n        this.rightKey = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);\n        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\n    }\n    followCamera(game) {\n        game.camera.follow(this.sprite);\n    }\n    setPlayer(player) {\n        this.player = player;\n    }\n    update(game, level) {\n        if (this.isMoving) {\n            return false;\n        }\n        if (this.playerIsClose()) {\n            if (!this.soundFear) {\n                SoundManager_1.SoundManager.play(SoundManager_1.SOUND.EVIL_COIN_FEAR);\n                this.soundFear = true;\n                game.time.events.add(Phaser.Timer.SECOND * 2, () => {\n                    this.soundFear = false;\n                }, this);\n            }\n        }\n        if (this.leftKey.isDown) {\n            this.moveTo(game, this.position.left(), level);\n            return true;\n        }\n        else if (this.rightKey.isDown) {\n            this.moveTo(game, this.position.right(), level);\n            return true;\n        }\n        else if (this.upKey.isDown) {\n            this.moveTo(game, this.position.up(), level);\n            return true;\n        }\n        else if (this.downKey.isDown) {\n            this.moveTo(game, this.position.down(), level);\n            return true;\n        }\n        else {\n            if (this.sprite.animations.currentAnim.name !== 'IDLE') {\n                this.sprite.animations.play('IDLE');\n            }\n        }\n        return false;\n    }\n    playIdle() {\n        if (this.sprite.animations.currentAnim.name !== 'IDLE') {\n            this.sprite.animations.play('IDLE');\n        }\n    }\n    playerIsClose() {\n        if (this.player instanceof EvilPlayer_1.EvilPlayer && !this.player.visible) {\n            return false;\n        }\n        return Coin_1.Coin.dist(this.player.getPosition(), this.position) < Coin_1.Coin.SCARED_DISTANCE;\n    }\n    moveTo(game, position, level) {\n        this.runSound.volume = 1;\n        if (!this.isMovingAllowed(position, level)) {\n            return;\n        }\n        if (this.sprite.animations.currentAnim.name !== 'RUN') {\n            this.sprite.animations.play('RUN');\n        }\n        if (this.position.x > position.x) {\n            this.sprite.scale.set(-1, 1);\n            this.sprite.anchor.set(1, 0);\n        }\n        else {\n            this.sprite.scale.set(1, 1);\n            this.sprite.anchor.set(0, 0);\n        }\n        this.isMoving = true;\n        this.position = position;\n        [this.sprite, this.normalSprite, this.shadow].forEach((sprite) => {\n            game.add.tween(sprite).to({\n                x: this.position.x * app_1.TILE_SIZE,\n                y: this.position.y * app_1.TILE_SIZE\n            }, 0.3 * Phaser.Timer.SECOND, Phaser.Easing.Default, true);\n        });\n        game.time.events.add(0.3 * Phaser.Timer.SECOND, () => {\n            this.isMoving = false;\n            this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n            this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n            this.runSound.volume = 0;\n        }, this);\n    }\n    isMovingAllowed(position, level) {\n        if (!level.isAllowedForCoin(position)) {\n            return false;\n        }\n        return true;\n    }\n    setPosition(point) {\n        this.position = point;\n        this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n        this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        this.shadow.position.x = this.position.x * app_1.TILE_SIZE;\n        this.shadow.position.y = this.position.y * app_1.TILE_SIZE;\n    }\n    kill() {\n        this.dead = true;\n        this.sprite.animations.play('DIE');\n        this.sprite.alpha = 0;\n        this.normalSprite.alpha = 0;\n        this.shadow.alpha = 0;\n    }\n    getPosition() {\n        return this.position;\n    }\n    isAlive() {\n        return !this.dead;\n    }\n    ressussite() {\n        this.sprite.alpha = 1;\n        this.normalSprite.alpha = 1;\n        this.shadow.alpha = 1;\n        this.dead = false;\n    }\n    stopSound() {\n        this.runSound.volume = 0;\n    }\n}\nexports.PlayableCoin = PlayableCoin;\n\n\n//# sourceURL=webpack:///./src/game/PlayableCoin.ts?");

/***/ }),

/***/ "./src/game/Player.ts":
/*!****************************!*\
  !*** ./src/game/Player.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nconst Coin_1 = __webpack_require__(/*! ./Coin */ \"./src/game/Coin.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../SoundManager */ \"./src/SoundManager.ts\");\nclass Player {\n    constructor(position) {\n        this.position = position;\n        this.isMoving = false;\n    }\n    getPosition() {\n        return this.position;\n    }\n    create(game, group) {\n        this.shadow = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'shadow');\n        group.add(this.shadow);\n        this.shadow.anchor.set(0.1, 0.1);\n        this.sprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'normal_hero');\n        group.add(this.sprite);\n        this.sprite.animations.add('IDLE', [0, 1, 2, 3], Phaser.Timer.SECOND / 150, true);\n        this.sprite.animations.add('RUN', [4, 5, 6, 7, 8, 9], Phaser.Timer.SECOND / 100, true);\n        this.sprite.animations.add('KILL', [10, 11, 12, 13, 14, 15, 16], Phaser.Timer.SECOND / 75, false);\n        this.sprite.animations.play('IDLE');\n        this.sprite.anchor.set(0.3, 0.1);\n        this.leftKey = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n        this.rightKey = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);\n        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\n    }\n    followCamera(game) {\n        game.camera.follow(this.sprite);\n    }\n    update(game, level) {\n        if (this.isMoving) {\n            return;\n        }\n        const coin = this.canKill();\n        if (coin) {\n            this.kill(game, coin);\n        }\n        else if (this.leftKey.isDown) {\n            this.moveTo(game, level, this.position.left());\n        }\n        else if (this.rightKey.isDown) {\n            this.moveTo(game, level, this.position.right());\n        }\n        else if (this.upKey.isDown) {\n            this.moveTo(game, level, this.position.up());\n        }\n        else if (this.downKey.isDown) {\n            this.moveTo(game, level, this.position.down());\n        }\n        else {\n            this.sprite.animations.play('IDLE');\n            this.evilPlayer.playIdle();\n        }\n    }\n    setPlayableCoin(playableCoin) {\n        this.playableCoin = playableCoin;\n    }\n    moveTo(game, level, position) {\n        this.evilPlayer.moveTo(game, level, position, 0.3 * Phaser.Timer.SECOND);\n        if (!this.isMovingAllowed(level, position)) {\n            return;\n        }\n        this.isMoving = true;\n        if (this.position.x < position.x) {\n            this.sprite.scale.set(1, 1);\n            this.sprite.anchor.set(0.3, 0.1);\n        }\n        else if (this.position.x > position.x) {\n            this.sprite.scale.set(-1, 1);\n            this.sprite.anchor.set(0.7, 0.1);\n        }\n        this.sprite.animations.play('RUN');\n        game.add.tween(this.sprite).to({\n            x: position.x * app_1.TILE_SIZE,\n            y: position.y * app_1.TILE_SIZE\n        }, 0.3 * Phaser.Timer.SECOND, Phaser.Easing.Default, true);\n        game.add.tween(this.shadow).to({\n            x: position.x * app_1.TILE_SIZE,\n            y: position.y * app_1.TILE_SIZE\n        }, 0.3 * Phaser.Timer.SECOND, Phaser.Easing.Default, true);\n        game.time.events.add(0.3 * Phaser.Timer.SECOND, () => {\n            this.position = position;\n            this.isMoving = false;\n            this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n            this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        }, this);\n        this.coins.forEach((coin) => {\n            if (coin.getPosition().equals(position)) {\n                coin.stopMoving(game, this.sprite.scale.x > 0);\n            }\n        });\n    }\n    isMovingAllowed(level, position) {\n        if (!level.isAllowedForPlayer(position)) {\n            return false;\n        }\n        return true;\n    }\n    setCoins(coins) {\n        this.coins = coins;\n    }\n    canKill() {\n        const coins = this.coins.filter((coin) => {\n            return coin.getPosition().equals(this.position) && coin.isAlive();\n        });\n        if (coins.length) {\n            return coins[0];\n        }\n        if (this.playableCoin.getPosition().equals(this.position) && this.playableCoin.isAlive()) {\n            return this.playableCoin;\n        }\n        return null;\n    }\n    kill(game, coin) {\n        this.isMoving = true;\n        this.sprite.animations.play('KILL');\n        const duration = 0.5 * Phaser.Timer.SECOND;\n        this.evilPlayer.playKillAnimationTimeboxed(game, duration);\n        SoundManager_1.SoundManager.play(SoundManager_1.SOUND.PICK_COIN);\n        if (coin instanceof Coin_1.Coin) {\n            coin.stopMoving(game, this.sprite.scale.x > 0);\n        }\n        game.time.events.add(duration, () => {\n            this.sprite.animations.play('IDLE');\n            this.isMoving = false;\n            coin.kill();\n        }, this);\n    }\n    setPosition(point) {\n        this.isMoving = false;\n        this.position = point;\n        this.sprite.position.x = this.position.x * app_1.TILE_SIZE;\n        this.sprite.position.y = this.position.y * app_1.TILE_SIZE;\n        this.shadow.position.x = this.position.x * app_1.TILE_SIZE;\n        this.shadow.position.y = this.position.y * app_1.TILE_SIZE;\n    }\n    setEvilPlayer(evilPlayer) {\n        this.evilPlayer = evilPlayer;\n    }\n}\nexports.Player = Player;\n\n\n//# sourceURL=webpack:///./src/game/Player.ts?");

/***/ }),

/***/ "./src/game/Point.ts":
/*!***************************!*\
  !*** ./src/game/Point.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Direction_1 = __webpack_require__(/*! ./Direction */ \"./src/game/Direction.ts\");\nclass Point extends PIXI.Point {\n    constructor() {\n        super(...arguments);\n        this.divideScalar = (s) => {\n            if (s === 0) {\n                this.x = 0;\n                this.y = 0;\n            }\n            else {\n                var invScalar = 1 / s;\n                this.x *= invScalar;\n                this.y *= invScalar;\n            }\n            return this;\n        };\n        this.length = () => Math.sqrt(this.x * this.x + this.y * this.y);\n        this.normalize = () => this.divideScalar(this.length());\n    }\n    equals(point) {\n        return this.x === point.x && this.y === point.y;\n    }\n    add(point) {\n        return new Point(this.x + point.x, this.y + point.y);\n    }\n    remove(point) {\n        return new Point(this.x - point.x, this.y - point.y);\n    }\n    left() {\n        return this.add(new Point(-1, 0));\n    }\n    right() {\n        return this.add(new Point(1, 0));\n    }\n    up() {\n        return this.add(new Point(0, -1));\n    }\n    down() {\n        return this.add(new Point(0, 1));\n    }\n    addDirection(direction) {\n        switch (direction) {\n            case Direction_1.DIRECTION.LEFT: return this.left();\n            case Direction_1.DIRECTION.RIGHT: return this.right();\n            case Direction_1.DIRECTION.UP: return this.up();\n            case Direction_1.DIRECTION.DOWN: return this.down();\n        }\n        throw \"direction is null!\";\n    }\n    addReverseSens(direction) {\n        switch (direction) {\n            case Direction_1.DIRECTION.LEFT: return this.right();\n            case Direction_1.DIRECTION.RIGHT: return this.left();\n            case Direction_1.DIRECTION.UP: return this.down();\n            case Direction_1.DIRECTION.DOWN: return this.up();\n        }\n        throw \"direction is null!\";\n    }\n}\nexports.default = Point;\n\n\n//# sourceURL=webpack:///./src/game/Point.ts?");

/***/ }),

/***/ "./src/game/Tile.ts":
/*!**************************!*\
  !*** ./src/game/Tile.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_1 = __webpack_require__(/*! ../app */ \"./src/app.ts\");\nclass Tile {\n    constructor(position) {\n        this.position = position;\n    }\n    create(game, normalGroup, evilGroup) {\n        const random = Math.ceil(Math.random() * 2);\n        this.normalSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'basic_ground', random);\n        normalGroup.add(this.normalSprite);\n        this.evilSprite = game.add.sprite(this.position.x * app_1.TILE_SIZE, this.position.y * app_1.TILE_SIZE, 'evil_ground', random);\n        evilGroup.add(this.evilSprite);\n    }\n    getPosition() {\n        return this.position;\n    }\n    isAllowedForPlayer() {\n        return true;\n    }\n    isAllowedForCoin() {\n        return true;\n    }\n}\nexports.Tile = Tile;\n\n\n//# sourceURL=webpack:///./src/game/Tile.ts?");

/***/ }),

/***/ "./src/game/Timer.ts":
/*!***************************!*\
  !*** ./src/game/Timer.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Timer {\n    create(game, interfaceGroup) {\n        this.text = game.add.bitmapText(game.width - 100, 5, \"Carrier Command\", \"\", 7, interfaceGroup);\n        this.text.fixedToCamera = true;\n        game.time.events.loop(Phaser.Timer.SECOND, () => {\n            if (this.remainingTime !== null) {\n                this.remainingTime--;\n            }\n        }, this);\n    }\n    update() {\n        if (this.remainingTime === null) {\n            this.text.setText('');\n        }\n        else {\n            this.text.setText(Math.ceil(Math.max(0, this.remainingTime)) + ' s');\n        }\n    }\n    setRemainingTime(remainingTime) {\n        this.remainingTime = remainingTime;\n    }\n    isOver() {\n        if (this.remainingTime === null) {\n            return false;\n        }\n        return this.remainingTime <= 0;\n    }\n}\nexports.Timer = Timer;\n\n\n//# sourceURL=webpack:///./src/game/Timer.ts?");

/***/ }),

/***/ "./src/game/game_state/Boot.ts":
/*!*************************************!*\
  !*** ./src/game/game_state/Boot.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_1 = __webpack_require__(/*! ../../app */ \"./src/app.ts\");\nclass Boot extends Phaser.State {\n    create() {\n        this.game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;\n        this.game.scale.setUserScale(app_1.SCALE, app_1.SCALE);\n        this.game.renderer.renderSession.roundPixels = true;\n        Phaser.Canvas.setImageRenderingCrisp(this.game.canvas);\n        this.game.state.start('Preload');\n    }\n}\nexports.default = Boot;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Boot.ts?");

/***/ }),

/***/ "./src/game/game_state/Credits.ts":
/*!****************************************!*\
  !*** ./src/game/game_state/Credits.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar State = Phaser.State;\nclass Credits extends State {\n    create(game) {\n        game.add.image(100, 100, 'normal_hero', 0);\n    }\n}\nexports.Credits = Credits;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Credits.ts?");

/***/ }),

/***/ "./src/game/game_state/Preload.ts":
/*!****************************************!*\
  !*** ./src/game/game_state/Preload.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Preload extends Phaser.State {\n    constructor() {\n        super();\n        this.count = 0;\n    }\n    loading() {\n        this.count++;\n        this.graphics.drawRect(11.5, 11.5, 98 * (this.count / Preload.COUNTER), 18);\n        if (this.count >= Preload.COUNTER) {\n            this.game.state.start('Stage1');\n        }\n    }\n    preload(game) {\n        this.graphics = this.game.add.graphics();\n        this.graphics.lineStyle(1, 0xffffff);\n        this.graphics.drawRect(10.5, 10.5, 100, 20);\n        this.graphics.beginFill(0x00ff00);\n        this.graphics.lineStyle(0);\n        this.loadAudio();\n        this.loadImages();\n        this.loadFonts();\n    }\n    loadAudio() {\n        this.game.load.audio('music', 'dist/assets/musics/main_theme_chill.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_music', 'dist/assets/musics/main_theme_rock.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_death_1', 'dist/assets/sfx/evil_coin_death_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_death_2', 'dist/assets/sfx/evil_coin_death_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_death_3', 'dist/assets/sfx/evil_coin_death_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_death_4', 'dist/assets/sfx/evil_coin_death_4.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_1', 'dist/assets/sfx/evil_coin_fear_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_2', 'dist/assets/sfx/evil_coin_fear_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_3', 'dist/assets/sfx/evil_coin_fear_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_4', 'dist/assets/sfx/evil_coin_fear_4.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_5', 'dist/assets/sfx/evil_coin_fear_5.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_6', 'dist/assets/sfx/evil_coin_fear_6.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_fear_7', 'dist/assets/sfx/evil_coin_fear_7.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_push_1', 'dist/assets/sfx/evil_coin_push_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_push_2', 'dist/assets/sfx/evil_coin_push_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('evil_coin_push_3', 'dist/assets/sfx/evil_coin_push_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_death_1', 'dist/assets/sfx/other_coin_death_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_death_2', 'dist/assets/sfx/other_coin_death_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_death_3', 'dist/assets/sfx/other_coin_death_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_1', 'dist/assets/sfx/other_coin_fear_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_2', 'dist/assets/sfx/other_coin_fear_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_3', 'dist/assets/sfx/other_coin_fear_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_4', 'dist/assets/sfx/other_coin_fear_4.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_5', 'dist/assets/sfx/other_coin_fear_5.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_6', 'dist/assets/sfx/other_coin_fear_6.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_fear_7', 'dist/assets/sfx/other_coin_fear_7.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_hurt_1', 'dist/assets/sfx/other_coin_hurt_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('other_coin_hurt_2', 'dist/assets/sfx/other_coin_hurt_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('pick_coin_1', 'dist/assets/sfx/pick_coin_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('pick_coin_2', 'dist/assets/sfx/pick_coin_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('pick_coin_3', 'dist/assets/sfx/pick_coin_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_1', 'dist/assets/sfx/sword_1.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_2', 'dist/assets/sfx/sword_2.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_3', 'dist/assets/sfx/sword_3.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_4', 'dist/assets/sfx/sword_4.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_5', 'dist/assets/sfx/sword_5.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_6', 'dist/assets/sfx/sword_6.mp3').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.audio('sword_7', 'dist/assets/sfx/sword_7.mp3').onLoadComplete.add(() => { this.loading(); });\n    }\n    loadImages() {\n        this.game.load.spritesheet('chips', 'dist/assets/images/chips.png', 12, 12).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('basic_ground', 'dist/assets/images/ground/basic.png', 24, 24).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('evil_ground', 'dist/assets/images/ground/evil_basic.png', 24, 24).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('bloc_box', 'dist/assets/images/ground/bloc.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('evil_bloc_box', 'dist/assets/images/ground/evil_bloc.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('bloc_stone', 'dist/assets/images/ground/bloc2.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('evil_bloc_stone', 'dist/assets/images/ground/evil_bloc2.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('bush', 'dist/assets/images/ground/bush.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('evil_bush', 'dist/assets/images/ground/evil_bush.png').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('normal_hero', 'dist/assets/images/gentil_hero_all.png', 60, 30).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('evil_hero', 'dist/assets/images/evil_hero_all.png', 60, 60).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('normal_coin', 'dist/assets/images/gentil_coin.png', 24, 24).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('coin', 'dist/assets/images/coin.png', 24, 24).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.spritesheet('evil_coin', 'dist/assets/images/evil_coin.png', 60, 60).onLoadComplete.add(() => { this.loading(); });\n        this.game.load.image('shadow', 'dist/assets/images/shadow.png').onLoadComplete.add(() => { this.loading(); });\n    }\n    loadFonts() {\n        this.game.load.bitmapFont('font', 'dist/assets/fonts/font.png', 'dist/assets/fonts/font.xml').onLoadComplete.add(() => { this.loading(); });\n        this.game.load.bitmapFont('Carrier Command', 'dist/assets/fonts/carrier_command.png', 'dist/assets/fonts/carrier_command.xml').onLoadComplete.add(() => { this.loading(); });\n    }\n}\nPreload.COUNTER = 55;\nexports.default = Preload;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Preload.ts?");

/***/ }),

/***/ "./src/game/game_state/Stage.ts":
/*!**************************************!*\
  !*** ./src/game/game_state/Stage.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst easystarjs_1 = __webpack_require__(/*! easystarjs */ \"./node_modules/easystarjs/src/easystar.js\");\nconst app_1 = __webpack_require__(/*! ../../app */ \"./src/app.ts\");\nconst Coin_1 = __webpack_require__(/*! ../Coin */ \"./src/game/Coin.ts\");\nconst CoinCounter_1 = __webpack_require__(/*! ../CoinCounter */ \"./src/game/CoinCounter.ts\");\nconst EvilPlayer_1 = __webpack_require__(/*! ../EvilPlayer */ \"./src/game/EvilPlayer.ts\");\nconst PlayableCoin_1 = __webpack_require__(/*! ../PlayableCoin */ \"./src/game/PlayableCoin.ts\");\nconst Player_1 = __webpack_require__(/*! ../Player */ \"./src/game/Player.ts\");\nconst Timer_1 = __webpack_require__(/*! ../Timer */ \"./src/game/Timer.ts\");\nconst MessageDisplayer_1 = __webpack_require__(/*! ../MessageDisplayer */ \"./src/game/MessageDisplayer.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../../SoundManager */ \"./src/SoundManager.ts\");\nclass Stage extends Phaser.State {\n    constructor(level) {\n        super();\n        this.coins = [];\n        this.isEvilMode = false;\n        this.isGlitching = false;\n        this.updateGoodMode = (game) => {\n            if (this.areAllCoinsDead(this.coins)) {\n                // WIN CONDITION FOR NORMAL MODE\n                this.coins.forEach((coin) => {\n                    coin.ressussitate();\n                });\n                this.canInteract = false;\n                this.playableCoin.stopSound();\n                const winMessageDuration = 3 * Phaser.Timer.SECOND;\n                const superGlitchDuration = 2 * Phaser.Timer.SECOND;\n                this.playableCoin.playIdle();\n                this.messageDisplayer.displayBig(game, \"You win!\", winMessageDuration);\n                // Little glitches\n                for (let i = 0; i < 20; i++) {\n                    game.time.events.add(Math.random() * winMessageDuration, () => {\n                        if (this.isGlitching) {\n                            return;\n                        }\n                        const time = Math.random() * 0.3 * Phaser.Timer.SECOND;\n                        this.glitch(game, true, time);\n                        this.messageDisplayer.setBigText('You lost!');\n                        this.game.time.events.add(time, () => {\n                            this.messageDisplayer.setBigText('You win!');\n                        });\n                    }, this);\n                }\n                // Big glitches\n                game.time.events.add(winMessageDuration, () => {\n                    this.runSuperGlitch(game, superGlitchDuration);\n                });\n                game.time.events.add(winMessageDuration + superGlitchDuration, () => {\n                    this.canInteract = true;\n                    this.isEvilMode = true;\n                    this.coins.forEach((coin, i) => {\n                        coin.reinitialize(this.level.getCoinPositions()[i]);\n                    });\n                    this.playableCoin.ressussite();\n                    this.timer.setRemainingTime(null);\n                    this.evilPlayer.setPosition(this.level.getOriginalPlayerPosition());\n                    this.evilPlayer.setVisible(false);\n                    this.stepCounter = 0;\n                    this.evilPlayer.playIdle();\n                });\n                return;\n            }\n            if (this.timer.isOver()) {\n                // LOST CONDITION FOR NORMAL MODE\n                this.playableCoin.stopSound();\n                this.coins.forEach((coin) => {\n                    coin.ressussitate();\n                });\n                this.playableCoin.ressussite();\n                this.timer.setRemainingTime(this.level.getRemainingTime());\n                const messageLostDuration = 5 * Phaser.Timer.SECOND;\n                this.messageDisplayer.display(game, \"Argh, I have to improve my\\n\\nskills to catch these coins\\n\\nfaster!\", messageLostDuration);\n                game.time.events.add(messageLostDuration, () => {\n                    this.game.state.restart(true);\n                });\n                return;\n            }\n            this.player.update(game, this.level);\n            this.coins.forEach(coin => coin.update(game, this.level));\n        };\n        this.updateEvilMode = (game) => {\n            if (this.evilPlayer.getPosition().equals(this.playableCoin.position)) {\n                // LOST CONDITION FOR EVIL MODE\n                this.playableCoin.stopSound();\n                this.canInteract = false;\n                this.evilPlayer.playKill();\n                SoundManager_1.SoundManager.play(SoundManager_1.SOUND.SWORD);\n                SoundManager_1.SoundManager.play(SoundManager_1.SOUND.EVIL_COIN_DEATH);\n                game.time.events.add(0.7 * Phaser.Timer.SECOND, () => {\n                    SoundManager_1.SoundManager.play(SoundManager_1.SOUND.SWORD);\n                    SoundManager_1.SoundManager.play(SoundManager_1.SOUND.EVIL_COIN_DEATH);\n                }, this);\n                const glitchDuration = Phaser.Timer.SECOND;\n                const killAnimationTime = 1.3 * Phaser.Timer.SECOND;\n                game.time.events.add(killAnimationTime, () => {\n                    this.evilPlayer.playIdle();\n                    this.runSuperGlitch(game, glitchDuration);\n                });\n                game.time.events.add(glitchDuration + killAnimationTime, () => {\n                    this.onGameOver();\n                    this.timer.setRemainingTime(this.level.getRemainingTime());\n                    this.canInteract = true;\n                });\n                return;\n            }\n            if (this.timer.isOver()) {\n                // WIN CONDITION FOR EVIL MODE\n                this.playableCoin.stopSound();\n                this.canInteract = false;\n                this.evilPlayer.playIdle();\n                this.playableCoin.playIdle();\n                const waitTime = Phaser.Timer.SECOND;\n                const glitchDuration = Phaser.Timer.SECOND;\n                const blackTime = Phaser.Timer.SECOND * 2;\n                game.time.events.add(waitTime, () => {\n                    this.runSuperGlitch(game, glitchDuration);\n                });\n                game.time.events.add(waitTime + glitchDuration, () => {\n                    [this.interfaceGroup, this.evilGroup, this.normalGroup].forEach((group) => {\n                        game.add.tween(group).to({\n                            alpha: 0\n                        }, blackTime, Phaser.Easing.Default, true);\n                    });\n                });\n                game.time.events.add(waitTime + glitchDuration + blackTime * 1.5, () => {\n                    this.onGameWin();\n                    this.canInteract = true;\n                });\n                return;\n            }\n            this.evilPlayer.update(game, this.level);\n            const hasMoved = this.playableCoin.update(game, this.level);\n            if (hasMoved) {\n                this.stepCounter++;\n                if (this.stepCounter === 3) {\n                    this.evilPlayer.setVisible(true);\n                    this.canInteract = false;\n                    this.playableCoin.playIdle();\n                    this.evilPlayer.canMove = false;\n                    const durationMEssage = this.showStageBegin(game);\n                    game.time.events.add(durationMEssage, () => {\n                        this.canInteract = true;\n                        this.evilPlayer.canMove = true;\n                        this.timer.setRemainingTime(this.level.getRemainingTime());\n                    });\n                }\n            }\n            this.coins.forEach(coin => coin.update(game, this.level));\n        };\n        this.areAllCoinsDead = (coins) => {\n            for (const coin of coins) {\n                if (coin.isAlive()) {\n                    return false;\n                }\n            }\n            if (this.playableCoin.isAlive()) {\n                return false;\n            }\n            return true;\n        };\n        this.level = level;\n        this.firstStart = true;\n        const pathfinder = new easystarjs_1.js();\n        pathfinder.setAcceptableTiles([0]);\n        pathfinder.setGrid(this.level.getGrid());\n        this.firstStart = true;\n        this.playableCoin = new PlayableCoin_1.PlayableCoin(this.level.getOriginalPlayableCoinPosition());\n        this.evilPlayer = new EvilPlayer_1.EvilPlayer(pathfinder, this.playableCoin, this.level.getOriginalPlayerPosition());\n        this.playableCoin.setPlayer(this.evilPlayer);\n        this.player = new Player_1.Player(this.level.getOriginalPlayerPosition());\n        this.player.setEvilPlayer(this.evilPlayer);\n        this.coins = [];\n        this.level.getCoinPositions().forEach((pos, i) => {\n            this.coins.push(new Coin_1.Coin(i, pos, this.evilPlayer, this.coins));\n        });\n        this.player.setCoins(this.coins);\n        this.evilPlayer.setCoins(this.coins);\n        this.coinCounter = new CoinCounter_1.CoinCounter(this.coins, this.playableCoin);\n        this.timer = new Timer_1.Timer();\n        this.messageDisplayer = new MessageDisplayer_1.MessageDisplayer();\n        this.player.setPlayableCoin(this.playableCoin);\n    }\n    create(game) {\n        this.canInteract = true;\n        SoundManager_1.SoundManager.create(game);\n        /** Create groups */\n        this.evilGroup = game.add.group(null, \"EVIL\");\n        this.normalGroup = game.add.group(null, \"NORMAL\");\n        this.interfaceGroup = game.add.group(null, 'INTERFACE');\n        game.add.existing(this.normalGroup);\n        game.add.existing(this.evilGroup);\n        game.add.existing(this.interfaceGroup);\n        /** Create items */\n        this.level.create(game, this.normalGroup, this.evilGroup);\n        this.playableCoin.create(game, this.evilGroup, this.normalGroup);\n        this.coins.forEach(coin => {\n            coin.create(game, this.normalGroup, this.evilGroup);\n        });\n        this.coinCounter.create(game, this.interfaceGroup);\n        this.evilPlayer.create(game, this.evilGroup);\n        this.player.create(game, this.normalGroup);\n        this.timer.create(game, this.interfaceGroup);\n        game.world.setBounds(0, 0, this.level.getWidth() * app_1.TILE_SIZE, this.level.getHeight() * app_1.TILE_SIZE);\n        this.refreshGroups(game);\n        /** Reset positions of all the items */\n        this.player.setPosition(this.level.getOriginalPlayerPosition());\n        this.evilPlayer.setPosition(this.level.getOriginalPlayerPosition());\n        this.playableCoin.setPosition(this.level.getOriginalPlayableCoinPosition());\n        this.coins.forEach((coin, i) => {\n            coin.reinitialize(this.level.getCoinPositions()[i]);\n        });\n        let duration = this.level.getRemainingTime();\n        this.messageDisplayer.create(game, this.interfaceGroup);\n        if (this.firstStart) {\n            duration += this.showStageBegin(game) / Phaser.Timer.SECOND;\n        }\n        this.timer.setRemainingTime(duration); // yeah, game jam\n        this.firstStart = false;\n    }\n    update(game) {\n        this.messageDisplayer.update(game);\n        if (this.messageDisplayer.isVisible()) {\n            return;\n        }\n        if (!this.canInteract) {\n            return;\n        }\n        if (this.level.shouldGlitch() && Math.random() < Stage.GLITCH_PROBA && !this.isGlitching) {\n            this.glitch(game);\n        }\n        if (this.isEvilMode) {\n            this.updateEvilMode(game);\n        }\n        else {\n            this.updateGoodMode(game);\n        }\n        this.refreshGroups(game);\n        this.coinCounter.update();\n        this.timer.update();\n    }\n    refreshGroups(game) {\n        if (this.isGlitching) {\n            return;\n        }\n        this.switchToAmbiance(this.isEvilMode);\n        if (this.isEvilMode) {\n            this.playableCoin.followCamera(game);\n        }\n        else {\n            this.player.followCamera(game);\n        }\n    }\n    glitch(game, unglichRandom = true, time = Math.random() * Stage.GLITCH_SECONDS * Phaser.Timer.SECOND) {\n        this.isGlitching = !this.isGlitching;\n        this.switchToAmbiance(this.normalGroup.alpha !== 0);\n        if (unglichRandom) {\n            game.time.events.add(time, () => {\n                this.isGlitching = !this.isGlitching;\n                this.switchToAmbiance(this.isEvilMode);\n            }, this);\n        }\n    }\n    switchToAmbiance(evilMode) {\n        if (evilMode) {\n            this.normalGroup.alpha = 0;\n            this.evilGroup.alpha = 1;\n            SoundManager_1.SoundManager.setEvil(true);\n        }\n        else {\n            this.normalGroup.alpha = 1;\n            this.evilGroup.alpha = 0;\n            SoundManager_1.SoundManager.setEvil(false);\n        }\n    }\n    showStageBegin(game) {\n        this.canInteract = false;\n        this.messageDisplayer.display(game, this.level.getNormalMessage(), Stage.scenarioDurationMessage);\n        this.game.time.events.add(Stage.scenarioDurationMessage + Stage.betweenDuration, () => {\n            this.messageDisplayer.displayBig(game, \"Stage \" + this.level.getStageNumber() + \"/3\", Stage.stageMessageDuration);\n        });\n        this.game.time.events.add(Stage.stageMessageDuration + Stage.scenarioDurationMessage + Stage.betweenDuration, () => {\n            this.canInteract = true;\n        });\n        return (Stage.scenarioDurationMessage + Stage.stageMessageDuration + Stage.betweenDuration);\n    }\n    runSuperGlitch(game, superGlitchDuration) {\n        for (let i = 0; i < 40; i++) {\n            game.time.events.add(Math.random() * (superGlitchDuration - 0.1 * Phaser.Timer.SECOND), () => {\n                if (this.isGlitching) {\n                    return;\n                }\n                const time = Math.random() * 0.05 * Phaser.Timer.SECOND;\n                this.glitch(game, true, time);\n            }, this);\n        }\n    }\n}\nStage.GLITCH_PROBA = 0.005;\nStage.GLITCH_SECONDS = 0.04;\nStage.scenarioDurationMessage = 4 * Phaser.Timer.SECOND;\nStage.stageMessageDuration = Phaser.Timer.SECOND * 2;\nStage.betweenDuration = Phaser.Timer.SECOND * 0.5;\nexports.Stage = Stage;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Stage.ts?");

/***/ }),

/***/ "./src/game/game_state/Stage1.ts":
/*!***************************************!*\
  !*** ./src/game/game_state/Stage1.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Level1_1 = __webpack_require__(/*! ../../levels/Level1 */ \"./src/levels/Level1.ts\");\nconst Stage_1 = __webpack_require__(/*! ./Stage */ \"./src/game/game_state/Stage.ts\");\nclass Stage1 extends Stage_1.Stage {\n    constructor() {\n        super(new Level1_1.Level1());\n        this.onGameWin = () => this.game.state.start(\"Stage2\");\n    }\n    onGameOver() {\n        this.game.state.restart(true);\n    }\n}\nexports.default = Stage1;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Stage1.ts?");

/***/ }),

/***/ "./src/game/game_state/Stage2.ts":
/*!***************************************!*\
  !*** ./src/game/game_state/Stage2.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Level2_1 = __webpack_require__(/*! ../../levels/Level2 */ \"./src/levels/Level2.ts\");\nconst Stage_1 = __webpack_require__(/*! ./Stage */ \"./src/game/game_state/Stage.ts\");\nclass Stage2 extends Stage_1.Stage {\n    constructor() {\n        super(new Level2_1.Level2());\n        this.onGameWin = () => this.game.state.start(\"Stage3\");\n    }\n    onGameOver() {\n        this.game.state.restart(true);\n    }\n}\nexports.default = Stage2;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Stage2.ts?");

/***/ }),

/***/ "./src/game/game_state/Stage3.ts":
/*!***************************************!*\
  !*** ./src/game/game_state/Stage3.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Stage_1 = __webpack_require__(/*! ./Stage */ \"./src/game/game_state/Stage.ts\");\nconst Level3_1 = __webpack_require__(/*! ../../levels/Level3 */ \"./src/levels/Level3.ts\");\nclass Stage3 extends Stage_1.Stage {\n    constructor() {\n        super(new Level3_1.Level3());\n        this.onGameWin = () => this.game.state.start(\"Credits\");\n    }\n    onGameOver() {\n        this.game.state.restart(true);\n    }\n}\nexports.default = Stage3;\n\n\n//# sourceURL=webpack:///./src/game/game_state/Stage3.ts?");

/***/ }),

/***/ "./src/levels/Level.ts":
/*!*****************************!*\
  !*** ./src/levels/Level.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Point_1 = __webpack_require__(/*! ../game/Point */ \"./src/game/Point.ts\");\nconst Tile_1 = __webpack_require__(/*! ../game/Tile */ \"./src/game/Tile.ts\");\nconst Bloc_1 = __webpack_require__(/*! ../game/Bloc */ \"./src/game/Bloc.ts\");\nconst Bush_1 = __webpack_require__(/*! ../game/Bush */ \"./src/game/Bush.ts\");\nclass Level {\n    constructor(levelDescriptor, playerPosition, coinPositions, evilCoinPosition) {\n        this.tiles = [];\n        this.grid = levelDescriptor;\n        this.playableCoinPosition = evilCoinPosition;\n        this.playerPosition = playerPosition;\n        this.coinPositions = coinPositions;\n        for (let y = 0; y < this.grid.length; y++) {\n            for (let x = 0; x < this.grid[y].length; x++) {\n                switch (this.grid[y][x]) {\n                    case 0:\n                        this.tiles.push(new Tile_1.Tile(new Point_1.default(x, y)));\n                        break;\n                    case 1:\n                        this.tiles.push(new Bloc_1.Bloc(new Point_1.default(x, y)));\n                        break;\n                    case 2:\n                        this.tiles.push(new Bush_1.Bush(new Point_1.default(x, y)));\n                        break;\n                }\n            }\n        }\n        this.width = this.grid[0].length;\n        this.height = this.grid.length;\n    }\n    getStageNumber() {\n        return 'X';\n    }\n    getNormalMessage() {\n        return \"X\";\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    create(game, normalGroup, evilGroup) {\n        this.tiles.forEach(tile => {\n            tile.create(game, normalGroup, evilGroup);\n        });\n    }\n    isAllowedForPlayer(position) {\n        if (position.x < 0) {\n            return false;\n        }\n        if (position.x >= this.getWidth()) {\n            return false;\n        }\n        if (position.y < 0) {\n            return false;\n        }\n        if (position.y >= this.getHeight()) {\n            return false;\n        }\n        for (let i = 0; i < this.tiles.length; i++) {\n            if (this.tiles[i].getPosition().equals(position)) {\n                return this.tiles[i].isAllowedForPlayer();\n            }\n        }\n    }\n    isAllowedForCoin(position) {\n        if (position.x < 0) {\n            return false;\n        }\n        if (position.x >= this.getWidth()) {\n            return false;\n        }\n        if (position.y < 0) {\n            return false;\n        }\n        if (position.y >= this.getHeight()) {\n            return false;\n        }\n        for (let i = 0; i < this.tiles.length; i++) {\n            if (this.tiles[i].getPosition().equals(position)) {\n                return this.tiles[i].isAllowedForCoin();\n            }\n        }\n    }\n    getGrid() {\n        return this.grid;\n    }\n    getOriginalPlayableCoinPosition() {\n        return this.playableCoinPosition;\n    }\n    getOriginalPlayerPosition() {\n        return this.playerPosition;\n    }\n    getCoinPositions() {\n        return this.coinPositions;\n    }\n    getRemainingTime() {\n        return 10;\n    }\n    shouldGlitch() {\n        return false;\n    }\n}\nexports.Level = Level;\n\n\n//# sourceURL=webpack:///./src/levels/Level.ts?");

/***/ }),

/***/ "./src/levels/Level1.ts":
/*!******************************!*\
  !*** ./src/levels/Level1.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Level_1 = __webpack_require__(/*! ./Level */ \"./src/levels/Level.ts\");\nconst Point_1 = __webpack_require__(/*! ../game/Point */ \"./src/game/Point.ts\");\nclass Level1 extends Level_1.Level {\n    constructor() {\n        super([\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2],\n            [2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2],\n            [2, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2],\n            [2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2],\n            [2, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2],\n            [2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n            [2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        ], new Point_1.default(1, 1), // hero\n        [\n            //new Point(7, 1),\n            //new Point(10, 1),\n            //new Point(3, 3),\n            //new Point(7, 4),\n            //new Point(9, 5),\n            new Point_1.default(1, 6),\n        ], new Point_1.default(9, 1) // playable coin\n        );\n    }\n    getStageNumber() {\n        return '1';\n    }\n    getNormalMessage() {\n        return \"Life is cool for a naked amazon.\\n\\nTypical daily currency hunt!\";\n    }\n}\nexports.Level1 = Level1;\n\n\n//# sourceURL=webpack:///./src/levels/Level1.ts?");

/***/ }),

/***/ "./src/levels/Level2.ts":
/*!******************************!*\
  !*** ./src/levels/Level2.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Level_1 = __webpack_require__(/*! ./Level */ \"./src/levels/Level.ts\");\nconst Point_1 = __webpack_require__(/*! ../game/Point */ \"./src/game/Point.ts\");\nclass Level2 extends Level_1.Level {\n    constructor() {\n        super([\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n            [2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 2],\n            [2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2],\n            [2, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2],\n            [2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 2],\n            [2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2],\n            [2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 2],\n            [2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2],\n            [2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2],\n            [2, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2],\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        ], new Point_1.default(5, 5), // hero\n        [\n            //new Point(1, 1),\n            //new Point(10, 1),\n            //new Point(5, 2),\n            new Point_1.default(2, 5),\n        ], new Point_1.default(7, 7) // playable coin\n        );\n    }\n    getStageNumber() {\n        return '2';\n    }\n    getNormalMessage() {\n        return \"WTF has just happened?\\n\\nWhat was that glitch?\\n\\nDid I just dream?\";\n    }\n    shouldGlitch() {\n        return true;\n    }\n}\nexports.Level2 = Level2;\n\n\n//# sourceURL=webpack:///./src/levels/Level2.ts?");

/***/ }),

/***/ "./src/levels/Level3.ts":
/*!******************************!*\
  !*** ./src/levels/Level3.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Level_1 = __webpack_require__(/*! ./Level */ \"./src/levels/Level.ts\");\nconst Point_1 = __webpack_require__(/*! ../game/Point */ \"./src/game/Point.ts\");\nclass Level3 extends Level_1.Level {\n    constructor() {\n        super([\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n            [2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2],\n            [2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2],\n            [2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2],\n            [2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2],\n            [2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 2],\n            [2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 2],\n            [2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2],\n            [2, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2],\n            [2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2],\n            [2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 2],\n            [2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2],\n            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        ], new Point_1.default(4, 11), // hero\n        [\n            new Point_1.default(1, 1),\n            new Point_1.default(11, 1),\n            new Point_1.default(12, 1),\n            new Point_1.default(11, 2),\n            new Point_1.default(12, 2),\n            new Point_1.default(7, 3),\n            new Point_1.default(1, 7),\n            new Point_1.default(5, 8),\n            new Point_1.default(12, 9),\n            new Point_1.default(7, 10),\n            new Point_1.default(1, 11),\n            new Point_1.default(11, 13),\n        ], new Point_1.default(9, 6) // playable coin\n        );\n    }\n    getStageNumber() {\n        return '3';\n    }\n    getNormalMessage() {\n        return \"I don't feel so great...\\n\\nHow could I stop this?\";\n    }\n    shouldGlitch() {\n        return true;\n    }\n}\nexports.Level3 = Level3;\n\n\n//# sourceURL=webpack:///./src/levels/Level3.ts?");

/***/ })

/******/ });